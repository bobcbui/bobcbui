{"version":3,"file":"index.js","sources":["../../src/node/loadLanguages.ts","../../src/node/parser/getCodeParser.ts","../../src/node/parser/createNotationRule.ts","../../src/node/utils/escapeRegExp.ts","../../src/node/utils/languages.ts","../../src/node/utils/resolveLanguage.ts","../../src/node/parser/highlightWord.ts","../../src/node/parser/notation.ts","../../src/node/parser/highlightLines.ts","../../src/node/parser/whitespace.ts","../../src/node/markdown/highlightPlugin.ts","../../src/node/markdown/preWrapperPlugin.ts","../../src/node/getTheme.ts","../../src/node/prepareClientConfigFile.ts","../../src/node/resolveHighlighter.ts","../../src/node/prismjsPlugin.ts"],"sourcesContent":["import Prism from 'prismjs'\nimport rawLoadLanguages from 'prismjs/components/index.js'\n\n// prevent warning messages\nrawLoadLanguages.silent = true\n\nexport const loadLanguages = (languages: string[]): void => {\n  const langsToLoad = languages.filter((item) => !(item in Prism.languages))\n\n  if (langsToLoad.length) {\n    rawLoadLanguages(langsToLoad)\n  }\n}\n","/**\n * This module processes the output of prismjs by wrapping each line of code\n * with a `<span class=\"line\">` and provides simple operations for the line node.\n */\n\nconst PRE_OPEN_TAG_RE = /^(<pre[^]*?>)/\nconst CODE_OPEN_TAG_RE = /^(<code[^]*?>)/\nconst FENCE_CLOSE_TAG_RE = /(<\\/code><\\/pre>(\\r?\\n))?$/\nconst NEWLINE_RE = /(\\r?\\n)/g\nconst CLASS_RE = /class=\"([^]*)\"/\nconst CODE_ESCAPE_RE = /\\[\\\\!code/g\n\nconst uniq = <T>(array: T[]): T[] => [...new Set(array)]\n\nexport interface OpenTag {\n  /**\n   * @example <tag\n   */\n  before: string\n  classList: string[]\n  /**\n   * @example >\n   */\n  after: string\n  content: string\n\n  toString(): string\n}\n\ntype LineHandler = (node: OpenTag, index: number) => void\n\nexport interface CodeParser {\n  pre: OpenTag\n  code: OpenTag\n  lines: OpenTag[]\n  /**\n   * Add a handler for each the line `<span class=\"line\">`\n   */\n  line: (handler: LineHandler) => void\n  /**\n   * Get the string representation of the parsed code\n   */\n  stringify: () => string\n}\n\nconst splitLines = (code: string): string[] => {\n  const parts = code.split(NEWLINE_RE)\n  const lines: string[] = []\n\n  for (let i = 0; i < parts.length; i += 2) {\n    lines.push(parts[i])\n  }\n\n  return lines\n}\n\nconst createOpenTag = (\n  snippet: string,\n  content = '',\n  classList: string[] = [],\n): OpenTag => {\n  const match = snippet.match(CLASS_RE)\n\n  if (!match) {\n    const hashHtml = snippet.length > 1\n\n    return {\n      before: hashHtml ? snippet.slice(0, -1) : '',\n      classList,\n      after: hashHtml ? snippet.slice(-1) : '',\n      content,\n      toString() {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const { before, after, classList, content } = this\n        const className = uniq(classList).join(' ')\n\n        return `${before}${className && before ? ` class=\"${className}\"` : ''}${after}${content}`\n      },\n    }\n  }\n\n  return {\n    before: snippet.slice(0, match.index),\n    classList: [...classList, ...match[1].split(' ')],\n    after: snippet.slice(match.index! + match[0].length),\n    content,\n    toString() {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { before, after, classList, content } = this\n      const className = uniq(classList).join(' ')\n\n      return `${before}${className && before ? ` class=\"${className}\"` : ''}${after}${content}`\n    },\n  }\n}\n\nexport const getCodeParser = (html: string): CodeParser => {\n  let content = html\n  const preOpen = html.match(PRE_OPEN_TAG_RE)?.[1] ?? ''\n\n  content = content.slice(preOpen.length)\n\n  const code = content.match(CODE_OPEN_TAG_RE)?.[1] ?? ''\n  const endLine = content.match(FENCE_CLOSE_TAG_RE)?.[1] ?? ''\n\n  content = content.slice(\n    code.length,\n    endLine.length ? -endLine.length : content.length,\n  )\n\n  const preOpenTag = createOpenTag(preOpen)\n  const codeOpenTag = createOpenTag(code)\n  const lineNodeList = splitLines(content).map((line) =>\n    createOpenTag('<span>', line, ['line']),\n  )\n\n  const lineNodeHandlers: LineHandler[] = []\n\n  const addLineNodeHandler = (handler: LineHandler): void => {\n    lineNodeHandlers.push(handler)\n  }\n\n  const stringify = (): string => {\n    const linesContent = lineNodeList.map((line, index) => {\n      lineNodeHandlers.forEach((handler) => {\n        handler(line, index + 1)\n      })\n      line.content = line.content.replace(CODE_ESCAPE_RE, '[!code')\n\n      return `${line.toString()}</span>`\n    })\n\n    return [\n      preOpenTag.toString(),\n      codeOpenTag.toString(),\n      linesContent.join('\\n'),\n      endLine,\n    ].join('')\n  }\n\n  return {\n    pre: preOpenTag,\n    code: codeOpenTag,\n    lines: lineNodeList,\n    line: addLineNodeHandler,\n    stringify,\n  }\n}\n","import type { CodeParser, OpenTag } from './getCodeParser.js'\n\n// prismjs comments\nconst COMMENT_EMPTY_TAG = /<span class=\"token comment\">\\s*?<\\/span>/\n\nexport const createNotationRule = (\n  parser: CodeParser,\n  pattern: RegExp,\n  onMatch: (match: string[], index: number) => boolean,\n): void => {\n  const nodeRemove: OpenTag[] = []\n\n  parser.lines.forEach((node, index) => {\n    let replaced = false as boolean\n\n    node.content = node.content.replace(pattern, (...match) => {\n      if (onMatch(match, index)) {\n        replaced = true\n        return ''\n      }\n      return match[0]\n    })\n\n    if (replaced) {\n      node.content = node.content.replace(COMMENT_EMPTY_TAG, '')\n      if (!node.content.trim()) nodeRemove.push(node)\n    }\n  })\n  for (const node of nodeRemove)\n    parser.lines.splice(parser.lines.indexOf(node), 1)\n}\n","export const escapeRegExp = (str: string): string =>\n  str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","/**\n * Language type for syntax highlight\n */\nexport interface HighlightLanguage {\n  /**\n   * Name of the language\n   *\n   * The name to be used for the class name,\n   * e.g. `class=\"language-typescript\"`\n   */\n  name: string\n\n  /**\n   * Extension of the language\n   *\n   * The file extension, which will be used for the\n   * class name, e.g. `class=\"ext-ts\"`\n   */\n  ext: string\n\n  /**\n   * Aliases that point to this language\n   *\n   * Do not conflict with other languages\n   */\n  aliases: string[]\n}\n\nexport const languageBash: HighlightLanguage = {\n  name: 'bash',\n  ext: 'sh',\n  aliases: ['bash', 'sh', 'shell', 'zsh'],\n}\n\nexport const languageCsharp: HighlightLanguage = {\n  name: 'csharp',\n  ext: 'cs',\n  aliases: ['cs', 'csharp'],\n}\n\nexport const languageDocker: HighlightLanguage = {\n  name: 'docker',\n  ext: 'docker',\n  aliases: ['docker', 'dockerfile'],\n}\n\nexport const languageFsharp: HighlightLanguage = {\n  name: 'fsharp',\n  ext: 'fs',\n  aliases: ['fs', 'fsharp'],\n}\n\nexport const languageJavascript: HighlightLanguage = {\n  name: 'javascript',\n  ext: 'js',\n  aliases: ['javascript', 'js'],\n}\n\nexport const languageKotlin: HighlightLanguage = {\n  name: 'kotlin',\n  ext: 'kt',\n  aliases: ['kotlin', 'kt'],\n}\n\nexport const languageMarkdown: HighlightLanguage = {\n  name: 'markdown',\n  ext: 'md',\n  aliases: ['markdown', 'md'],\n}\n\nexport const languagePython: HighlightLanguage = {\n  name: 'python',\n  ext: 'py',\n  aliases: ['py', 'python'],\n}\n\nexport const languageRuby: HighlightLanguage = {\n  name: 'ruby',\n  ext: 'rb',\n  aliases: ['rb', 'ruby'],\n}\n\nexport const languageRust: HighlightLanguage = {\n  name: 'rust',\n  ext: 'rs',\n  aliases: ['rs', 'rust'],\n}\n\nexport const languageStylus: HighlightLanguage = {\n  name: 'stylus',\n  ext: 'styl',\n  aliases: ['styl', 'stylus'],\n}\n\nexport const languageTypescript: HighlightLanguage = {\n  name: 'typescript',\n  ext: 'ts',\n  aliases: ['ts', 'typescript'],\n}\n\nexport const languageYaml: HighlightLanguage = {\n  name: 'yaml',\n  ext: 'yml',\n  aliases: ['yaml', 'yml'],\n}\n","import type { HighlightLanguage } from './languages.js'\nimport * as languages from './languages.js'\n\ntype LanguageAlias = string\n\ntype LanguagesMap = Record<LanguageAlias, HighlightLanguage>\n\n/**\n * A key-value map to get language info from alias\n *\n * - key: alias\n * - value: language\n */\nlet languagesMap: LanguagesMap | null = null\n\n/**\n * Lazy generate languages map\n */\n// eslint-disable-next-line no-return-assign\nconst getLanguagesMap = (): LanguagesMap =>\n  (languagesMap ??= Object.values(languages).reduce<LanguagesMap>(\n    (result, item) => ({\n      ...result,\n      ...Object.fromEntries(item.aliases.map((alias) => [alias, item])),\n    }),\n    {},\n  ))\n\n/**\n * Resolve language for highlight from token info\n */\nexport const resolveLanguage = (info: string): HighlightLanguage => {\n  // get user-defined language alias\n  const alias = info.match(/^([^ :[{]+)/)?.[1] || 'text'\n\n  // if the alias does not have a match in the map\n  // fallback to the alias itself\n  return (\n    getLanguagesMap()[alias] ?? {\n      name: alias,\n      ext: alias,\n      aliases: [alias],\n    }\n  )\n}\n","import type { CodeParser, OpenTag } from './getCodeParser.js'\n\nconst SPLIT_REGEXP = /(<[^>]+>)/\nconst META_WORD_REGEXP = /\\/((?:\\\\.|[^/])+)\\//g\n\nconst WORD_BEFORE = '<span class=\"highlighted-word\">'\nconst WORD_AFTER = '</span>'\n\nexport const highlightWordInLine = (\n  node: OpenTag,\n  pattern: RegExp | string,\n): void => {\n  node.content = node.content\n    .split(SPLIT_REGEXP)\n    .map((text) => {\n      if (!text || text.startsWith('<')) {\n        return text\n      }\n      return text.replaceAll(\n        pattern,\n        (word) => `${WORD_BEFORE}${word}${WORD_AFTER}`,\n      )\n    })\n    .join('')\n}\n\nexport const parseMetaHighlightWords = (meta: string): string[] => {\n  if (!meta) return []\n\n  const match = Array.from(meta.matchAll(META_WORD_REGEXP))\n\n  return (\n    match\n      // Escape backslashes\n      .map((v) => v[1].replace(/\\\\(.)/g, '$1'))\n  )\n}\n\n/**\n * ```js /Hello|Hi/\n */\nexport const metaWordHighlight = (parser: CodeParser, meta: string): void => {\n  const words = parseMetaHighlightWords(meta)\n\n  if (words.length) {\n    const pattern = new RegExp(words.join('|'), 'g')\n    parser.line((line) => {\n      highlightWordInLine(line, pattern)\n    })\n  }\n}\n","/**\n * This module implements some of the functionalities of the `shiki` transformer.\n * You can use the following magic comments:\n *\n * - line highlight:   `// [!code highlight]`, or `// [!code hl]`\n * - line diff add:    `// [!code ++]`\n * - line diff remove: `// [!code --]`\n * - line focus:       `// [!code focus]`\n * - line warning:     `// [!code warning]`\n * - line error:       `// [!code error]`\n * - highlight word:   `// [!code word:xxx]` `xxx` can be any word\n *\n * You can also add `:\\d` to achieve the same effect for the following `number` lines：\n *\n * - `// [!code highlight:3]`\n * - `// [!code ++:3]`\n * - ...more\n */\nimport { escapeRegExp } from '../utils/index.js'\nimport { createNotationRule } from './createNotationRule.js'\nimport type { CodeParser } from './getCodeParser.js'\nimport { highlightWordInLine } from './highlightWord.js'\n\nconst toArray = <T>(value: T | T[]): T[] =>\n  Array.isArray(value) ? value : [value]\n\nexport interface NotationCommentMarkerOption {\n  classMap: Record<string, string[] | string>\n  classPre?: string\n}\n\nconst createNotationCommentMarkerRule = (\n  parser: CodeParser,\n  { classMap, classPre }: NotationCommentMarkerOption,\n): void => {\n  const marker = Object.keys(classMap).map(escapeRegExp).join('|')\n  createNotationRule(\n    parser,\n    new RegExp(\n      // comment-begin               | marker           | range |   comment-end\n      `\\\\s*(?://|/\\\\*|<!--|#|--)\\\\s+\\\\[!code (${marker})(:\\\\d+)?\\\\]\\\\s*(?:\\\\*/|-->)?`,\n    ),\n    ([, match, range = ':1'], index): boolean => {\n      const lineNum = Number.parseInt(range.slice(1), 10)\n\n      parser.lines.slice(index, index + lineNum).forEach((node) => {\n        node.classList.push(...toArray(classMap[match]))\n      })\n      if (classPre) {\n        parser.pre.classList.push(classPre)\n      }\n\n      return true\n    },\n  )\n}\n\n/**\n * line highlight\n *\n * `// [!code highlight]`, or `// [!code hl]`\n */\nexport const notationHighlight = (parser: CodeParser): void => {\n  createNotationCommentMarkerRule(parser, {\n    classMap: {\n      highlight: 'highlighted',\n      hl: 'highlighted',\n    },\n    classPre: 'has-highlighted',\n  })\n}\n\n/**\n * line focus\n *\n * `// [!code focus]`\n */\nexport const notationFocus = (parser: CodeParser): void => {\n  createNotationCommentMarkerRule(parser, {\n    classMap: {\n      focus: 'has-focus',\n    },\n    classPre: 'has-focused-lines',\n  })\n}\n\n/**\n * line diff\n *\n * `// [!code ++]` and `// [!code --]`\n */\nexport const notationDiff = (parser: CodeParser): void => {\n  createNotationCommentMarkerRule(parser, {\n    classMap: {\n      '++': 'diff add',\n      '--': 'diff remove',\n    },\n    classPre: 'has-diff',\n  })\n}\n\n/**\n * line error level\n *\n * `// [!code warning]` and `// [!code error]`\n */\nexport const notationErrorLevel = (parser: CodeParser): void => {\n  createNotationCommentMarkerRule(parser, {\n    classMap: {\n      error: ['highlighted', 'error'],\n      warning: ['highlighted', 'warning'],\n    },\n    classPre: 'has-highlighted',\n  })\n}\n\n/**\n * highlight word\n *\n * `// [!code word:xxx]`: `xxx` can be any word.\n * @param parser\n */\nexport const notationWordHighlight = (parser: CodeParser): void => {\n  createNotationRule(\n    parser,\n    // comment-begin             | marker    |word            | range |   comment-end\n    /\\s*(?:\\/\\/|\\/\\*|<!--|#)\\s+\\[!code word:((?:\\\\.|[^:\\]])+)(:\\d+)?\\]\\s*(?:\\*\\/|-->)?/,\n    ([, word, range], index): boolean => {\n      const lineNum = range\n        ? Number.parseInt(range.slice(1), 10)\n        : parser.lines.length - 1\n\n      // escape backslashes\n      const normalizedWord = word.replace(/\\\\(.)/g, '$1')\n\n      parser.lines\n        // start from the next line after the comment\n        .slice(index + 1, index + 1 + lineNum)\n        .forEach((line) => {\n          highlightWordInLine(line, normalizedWord)\n        })\n\n      return true\n    },\n  )\n}\n","import type { CodeParser } from './getCodeParser'\n\nexport type HighlightLinesRange = [start: number, end: number]\n\n/**\n * Resolve highlight-lines ranges from token info\n */\nexport const getHighlightLinesRange = (\n  info: string,\n): HighlightLinesRange[] | null => {\n  // try to match highlight-lines mark\n  const match = info.match(/{([\\d,-]+)}/)\n\n  // no highlight-lines mark, return `null`\n  if (match === null) {\n    return null\n  }\n\n  // resolve lines ranges from the highlight-lines mark\n  return match[1].split(',').map((item) => {\n    const range = item.split('-')\n\n    if (range.length === 1) {\n      range.push(range[0])\n    }\n\n    return range.map((line) => Number.parseInt(line, 10)) as HighlightLinesRange\n  })\n}\n\n/**\n * Check if a line number is in ranges\n */\nconst isLineHighlighted = (\n  lineNumber: number,\n  ranges: HighlightLinesRange[],\n): boolean =>\n  ranges.some(([start, end]) => lineNumber >= start && lineNumber <= end)\n\nexport const highlightCodeLines = (\n  parser: CodeParser,\n  ranges: HighlightLinesRange[] | null,\n): void => {\n  if (ranges?.length) {\n    parser.line((node, index) => {\n      if (isLineHighlighted(index, ranges)) {\n        node.classList.push('highlighted')\n      }\n    })\n  }\n}\n","import type { WhitespacePosition } from '@vuepress/highlighter-helper'\nimport { resolveWhitespacePosition } from '@vuepress/highlighter-helper'\nimport type { CodeParser, OpenTag } from './getCodeParser.js'\n\nconst SPLIT_REGEXP = /(<[^>]+>)/\nconst SPACE_REGEXP = /[\\s\\t]/g\n\nconst classMap = {\n  ' ': 'space',\n  '\\t': 'tab',\n}\n\nconst isSpace = (char: string): boolean => char === ' ' || char === '\\t'\n\nconst renderSpace = (text: string): string =>\n  text.replaceAll(\n    SPACE_REGEXP,\n    (space) => `<span class=\"${classMap[space]}\">${space}</span>`,\n  )\n\nexport const renderWhitespaceInLine = (\n  node: OpenTag,\n  position: WhitespacePosition,\n): void => {\n  let snippets = node.content.split(SPLIT_REGEXP)\n\n  // match all whitespace\n  if (position === 'all') {\n    snippets = snippets.map((text) =>\n      !text || text.startsWith('<') ? text : renderSpace(text),\n    )\n  }\n  // match whitespace at the beginning of the line\n  if (position === 'boundary') {\n    let has = true\n    for (let i = 0; i < snippets.length; i++) {\n      const snippet = snippets[i]\n\n      if (snippet && !snippet.startsWith('<')) {\n        let j = 0\n\n        while (snippet[j] && j < snippet.length) {\n          if (!isSpace(snippet[j])) {\n            has = false\n            break\n          }\n          j++\n        }\n        snippets[i] = renderSpace(snippet.slice(0, j)) + snippet.slice(j)\n      }\n      if (!has) {\n        break\n      }\n    }\n  }\n\n  // match whitespace at the end of the line\n  if (position === 'boundary' || position === 'trailing') {\n    let has = true\n    for (let i = snippets.length - 1; i >= 0; i--) {\n      const snippet = snippets[i]\n      let j = snippet.length - 1\n      if (snippet && snippet[j] !== '>') {\n        while (snippet[j] && j >= 0) {\n          if (!isSpace(snippet[j])) {\n            has = false\n            break\n          }\n          j--\n        }\n        snippets[i] =\n          j === snippet.length - 1\n            ? snippet\n            : j > 0\n              ? snippet.slice(0, j) + renderSpace(snippet.slice(j))\n              : renderSpace(snippet)\n      }\n      if (!has) {\n        break\n      }\n    }\n  }\n\n  node.content = snippets.join('')\n}\n\n/**\n * type: 'all' | 'boundary' | 'trailing'\n *\n * ```js :whitespace[=type]\n */\nexport const metaWhitespace = (\n  parser: CodeParser,\n  meta: string,\n  defaultPosition?: WhitespacePosition | boolean,\n): void => {\n  const position = resolveWhitespacePosition(meta, defaultPosition)\n  if (position === false) return\n\n  parser.line((line) => {\n    renderWhitespaceInLine(line, position)\n  })\n}\n","import type { WhitespacePosition } from '@vuepress/highlighter-helper'\nimport type { Markdown } from 'vuepress/markdown'\nimport {\n  getCodeParser,\n  getHighlightLinesRange,\n  highlightCodeLines,\n  metaWhitespace,\n  metaWordHighlight,\n  notationDiff,\n  notationErrorLevel,\n  notationFocus,\n  notationHighlight,\n  notationWordHighlight,\n} from '../parser/index.js'\nimport { resolveLanguage } from '../utils/index.js'\n\nexport interface MarkdownItPrismjsHighlightOptions {\n  /**\n   * Enable highlight lines or not\n   *\n   * @default true\n   */\n  highlightLines?: boolean\n\n  /**\n   * Enable notation diff\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformernotationdiff\n   */\n  notationDiff?: boolean\n\n  /**\n   * Enable notation focus\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformernotationfocus\n   */\n  notationFocus?: boolean\n\n  /**\n   * Enable notation highlight\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformernotationhighlight\n   */\n  notationHighlight?: boolean\n\n  /**\n   * Enable notation error level\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformernotationerrorlevel\n   */\n  notationErrorLevel?: boolean\n\n  /**\n   * Enable notation word highlight\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformernotationwordhighlight\n   */\n  notationWordHighlight?: boolean\n\n  /**\n   * Enable render whitespace\n   * - true: enable render whitespace, same of `all`\n   * - false: disable render whitespace\n   * - 'all': render all whitespace\n   * - 'boundary': render leading and trailing whitespace of each line.\n   * - 'trailing': render trailing whitespace of each line\n   *\n   * you are able to use `:whitespace` or `:no-whitespace` or `:whitespace=position` to set single code block\n   *\n   * position: 'all' | 'boundary' | 'trailing'\n   *\n   * @default false\n   *\n   * @see https://shiki.style/packages/transformers#transformerrenderwhitespace\n   */\n  whitespace?: WhitespacePosition | boolean\n}\n\nexport const highlightPlugin = (\n  md: Markdown,\n  {\n    highlightLines = true,\n    notationDiff: enabledDiff,\n    notationErrorLevel: enabledErrorLevel,\n    notationFocus: enabledFocus,\n    notationHighlight: enabledHighlight,\n    notationWordHighlight: enabledWordHighlight,\n    whitespace: whitespacePosition = false,\n  }: MarkdownItPrismjsHighlightOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, idx, { langPrefix }] = args\n    const token = tokens[idx]\n\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    // resolve language from token info\n    const language = resolveLanguage(info)\n    const languageClass = `${langPrefix}${language.name}`\n\n    const code = rawFence(...args)\n      // remove the default `language-${ext}` class\n      .replace(/<code[^]*?>/, '<code>')\n\n    const parser = getCodeParser(code)\n\n    if (highlightLines) {\n      highlightCodeLines(parser, getHighlightLinesRange(info))\n    }\n    if (enabledDiff) {\n      notationDiff(parser)\n    }\n    if (enabledErrorLevel) {\n      notationErrorLevel(parser)\n    }\n    if (enabledFocus) {\n      notationFocus(parser)\n    }\n    if (enabledHighlight) {\n      notationHighlight(parser)\n    }\n\n    if (enabledWordHighlight) {\n      notationWordHighlight(parser)\n      metaWordHighlight(parser, info)\n    }\n\n    metaWhitespace(parser, info, whitespacePosition)\n\n    parser.pre.classList.push(languageClass)\n\n    return parser.stringify()\n  }\n}\n","import type { Markdown } from 'vuepress/markdown'\nimport { resolveLanguage } from '../utils/index.js'\n\nexport interface MarkdownItPreWrapperOptions {\n  /**\n   * Wrap the `<pre>` tag with an extra `<div>` or not. Do not disable it unless you\n   * understand what's it for\n   *\n   * - Required for line numbers, title display and code block collapsing\n   */\n  preWrapper?: boolean\n}\n\nexport const preWrapperPlugin = (\n  md: Markdown,\n  { preWrapper = true }: MarkdownItPreWrapperOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const result = rawFence(...args)\n\n    if (!preWrapper || !result.startsWith('<pre')) {\n      return result\n    }\n\n    const [tokens, idx, { langPrefix }] = args\n    const token = tokens[idx]\n\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n    // resolve language from token info\n    const language = resolveLanguage(info)\n    const languageClass = `${langPrefix}${language.name}`\n\n    /**\n     * Add information to dataset for current code block.\n     */\n    return `<div class=\"${languageClass}\" data-highlighter=\"prismjs\" data-ext=\"${language.ext}\">${result.replace(` class=\"${languageClass}\"`, '')}</div>`\n  }\n}\n","import type { PrismjsPluginOptions } from './options.js'\nimport type { PrismjsTheme } from './types.js'\n\nconst PRISMJS_THEMES: PrismjsTheme[] = [\n  'ateliersulphurpool-light',\n  'coldark-cold',\n  'coy',\n  'duotone-light',\n  'ghcolors',\n  'gruvbox-light',\n  'material-light',\n  'one-light',\n  'vs',\n  'atom-dark',\n  'cb',\n  'coldark-dark',\n  'dark',\n  'dracula',\n  'duotone-dark',\n  'duotone-earth',\n  'duotone-forest',\n  'duotone-sea',\n  'duotone-space',\n  'gruvbox-dark',\n  'holi',\n  'hopscotch',\n  'lucario',\n  'material-dark',\n  'material-oceanic',\n  'night-owl',\n  'nord',\n  'one-dark',\n  'pojoaque',\n  'shades-of-purple',\n  'solarized-dark-atom',\n  'tomorrow',\n  'vsc-dark-plus',\n  'xonokai',\n  'z-touch',\n]\n\nconst isValidTheme = (theme?: string): theme is PrismjsTheme =>\n  // @ts-expect-error: Actual assertion here\n  PRISMJS_THEMES.includes(theme)\n\nexport const getTheme = (\n  options: Pick<PrismjsPluginOptions, 'theme' | 'themes'>,\n): { light: PrismjsTheme; dark: PrismjsTheme } => ({\n  light: isValidTheme(options.themes?.light)\n    ? options.themes.light\n    : isValidTheme(options.theme)\n      ? options.theme\n      : 'nord',\n  dark: isValidTheme(options.themes?.dark)\n    ? options.themes.dark\n    : isValidTheme(options.theme)\n      ? options.theme\n      : 'nord',\n})\n","import { getModulePath } from '@vuepress/helper'\nimport type { App } from 'vuepress'\nimport { getTheme } from './getTheme.js'\nimport type { PrismjsPluginOptions } from './options.js'\n\nexport const prepareClientConfigFile = (\n  app: App,\n  {\n    theme,\n    themes,\n    lineNumbers = true,\n    highlightLines = true,\n    collapsedLines = 'disable',\n    codeBlockTitle = true,\n    notationDiff,\n    notationErrorLevel,\n    notationFocus,\n    notationHighlight,\n    notationWordHighlight,\n    whitespace,\n  }: PrismjsPluginOptions,\n): Promise<string> => {\n  const { light, dark } = getTheme({ theme, themes })\n\n  const imports: string[] = [\n    `import \"${getModulePath('@vuepress/highlighter-helper/styles/base.css', import.meta)}\"`,\n  ]\n\n  const setups: string[] = []\n\n  if (light === dark) {\n    imports.push(\n      `import \"${getModulePath(`@vuepress/plugin-prismjs/styles/${light}.css`, import.meta)}\"`,\n    )\n  } else {\n    imports.push(\n      `import \"${getModulePath(`@vuepress/plugin-prismjs/styles/${light}.light.css`, import.meta)}\"`,\n      `import \"${getModulePath(`@vuepress/plugin-prismjs/styles/${dark}.dark.css`, import.meta)}\"`,\n    )\n  }\n\n  if (lineNumbers !== 'disable') {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/line-numbers.css', import.meta)}\"`,\n    )\n  }\n\n  if (highlightLines || notationHighlight) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-highlight.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationDiff) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-diff.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationErrorLevel) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-error-level.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationFocus) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-focus.css', import.meta)}\"`,\n    )\n  }\n\n  if (notationWordHighlight) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/notation-word-highlight.css', import.meta)}\"`,\n    )\n  }\n\n  if (whitespace) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/whitespace.css', import.meta)}\"`,\n    )\n  }\n\n  if (collapsedLines !== 'disable') {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/collapsed-lines.css', import.meta)}\"`,\n      `import { setupCollapsedLines } from \"${getModulePath('@vuepress/highlighter-helper/client', import.meta)}\"`,\n    )\n    setups.push('setupCollapsedLines()')\n  }\n\n  if (codeBlockTitle) {\n    imports.push(\n      `import \"${getModulePath('@vuepress/highlighter-helper/styles/code-block-title.css', import.meta)}\"`,\n    )\n  }\n\n  let code = imports.join('\\n')\n\n  if (setups.length) {\n    code += `\\n\nexport default {\n  setup() {\n    ${setups.join('\\n    ')}\n  }\n}\\n`\n  }\n\n  return app.writeTemp('prismjs/config.js', code)\n}\n","import Prism from 'prismjs'\nimport { loadLanguages } from './loadLanguages.js'\nimport { resolveLanguage } from './utils/index.js'\n\nconst languageNameMap: Record<string, string> = {\n  html: 'markup',\n  vue: 'markup',\n}\n\n// documentation language of corresponding language\nconst docLangMap: Record<string, string> = {\n  csharp: 'xml-doc',\n  fsharp: 'xml-doc',\n  java: 'javadoc',\n  javascript: 'jsdoc',\n  php: 'phpdoc',\n  typescript: 'jsdoc',\n}\n\nexport type Highlighter = (code: string) => string\n\n/**\n * Resolve syntax highlighter for corresponding language\n */\nexport const resolveHighlighter = (language: string): Highlighter | null => {\n  const languageInfo = resolveLanguage(language)\n  const languageName = languageInfo.name\n\n  // get the languages that need to be loaded\n  const lang = languageNameMap[languageName] || languageName\n  const langsToLoad = [lang]\n\n  // doc language of current language\n  if (docLangMap[lang]) {\n    langsToLoad.push(docLangMap[lang])\n  }\n\n  // try to load languages\n  loadLanguages(langsToLoad)\n\n  // return null if current language could not be loaded\n  // the doc language is not required so we don't check it here\n  if (!(lang in Prism.languages)) {\n    return null\n  }\n\n  return (code) => Prism.highlight(code, Prism.languages[lang], lang)\n}\n","import {\n  codeBlockTitle as codeBlockTitlePlugin,\n  collapsedLines as collapsedLinesPlugin,\n  lineNumbers as lineNumbersPlugin,\n} from '@vuepress/highlighter-helper'\nimport type { Plugin } from 'vuepress/core'\nimport { loadLanguages } from './loadLanguages.js'\nimport { highlightPlugin, preWrapperPlugin } from './markdown/index.js'\nimport type { PrismjsPluginOptions } from './options.js'\nimport { prepareClientConfigFile } from './prepareClientConfigFile.js'\nimport { resolveHighlighter } from './resolveHighlighter.js'\n\nexport const prismjsPlugin = (options: PrismjsPluginOptions = {}): Plugin => {\n  const opt: PrismjsPluginOptions = {\n    preloadLanguages: ['markdown', 'jsdoc', 'yaml'],\n    preWrapper: true,\n    lineNumbers: true,\n    collapsedLines: false,\n    codeBlockTitle: true,\n    ...options,\n  }\n\n  return {\n    name: '@vuepress/plugin-prismjs',\n\n    extendsMarkdown(md) {\n      const {\n        preloadLanguages,\n        preWrapper,\n        lineNumbers,\n        collapsedLines,\n        codeBlockTitle,\n      } = opt\n\n      if (preloadLanguages?.length) {\n        loadLanguages(preloadLanguages)\n      }\n\n      md.options.highlight = (code, lang) => {\n        const highlighter = resolveHighlighter(lang)\n        return highlighter?.(code) || ''\n      }\n\n      md.use(highlightPlugin, opt)\n      md.use(preWrapperPlugin, { preWrapper })\n      if (preWrapper) {\n        if (lineNumbers !== 'disable')\n          md.use(lineNumbersPlugin, { lineNumbers, removeLastLine: true })\n        if (collapsedLines !== 'disable')\n          md.use(collapsedLinesPlugin, { collapsedLines, removeLastLine: true })\n\n        md.use(codeBlockTitlePlugin, { codeBlockTitle })\n      }\n    },\n\n    clientConfigFile: (app) => prepareClientConfigFile(app, opt),\n  }\n}\n"],"names":["rawLoadLanguages","loadLanguages","languages","langsToLoad","item","Prism","PRE_OPEN_TAG_RE","CODE_OPEN_TAG_RE","FENCE_CLOSE_TAG_RE","NEWLINE_RE","CLASS_RE","CODE_ESCAPE_RE","uniq","array","splitLines","code","parts","lines","i","createOpenTag","snippet","content","classList","match","hashHtml","before","after","className","getCodeParser","html","preOpen","endLine","preOpenTag","codeOpenTag","lineNodeList","line","lineNodeHandlers","handler","linesContent","index","COMMENT_EMPTY_TAG","createNotationRule","parser","pattern","onMatch","nodeRemove","node","replaced","escapeRegExp","str","languageBash","languageCsharp","languageDocker","languageFsharp","languageJavascript","languageKotlin","languageMarkdown","languagePython","languageRuby","languageRust","languageStylus","languageTypescript","languageYaml","languagesMap","getLanguagesMap","result","alias","resolveLanguage","info","SPLIT_REGEXP","META_WORD_REGEXP","WORD_BEFORE","WORD_AFTER","highlightWordInLine","text","word","parseMetaHighlightWords","meta","v","metaWordHighlight","words","toArray","value","createNotationCommentMarkerRule","classMap","classPre","marker","range","lineNum","notationHighlight","notationFocus","notationDiff","notationErrorLevel","notationWordHighlight","normalizedWord","getHighlightLinesRange","isLineHighlighted","lineNumber","ranges","start","end","highlightCodeLines","SPACE_REGEXP","isSpace","char","renderSpace","space","renderWhitespaceInLine","position","snippets","has","j","metaWhitespace","defaultPosition","resolveWhitespacePosition","highlightPlugin","md","highlightLines","enabledDiff","enabledErrorLevel","enabledFocus","enabledHighlight","enabledWordHighlight","whitespacePosition","rawFence","args","tokens","idx","langPrefix","token","language","languageClass","preWrapperPlugin","preWrapper","PRISMJS_THEMES","isValidTheme","theme","getTheme","options","prepareClientConfigFile","app","themes","lineNumbers","collapsedLines","codeBlockTitle","whitespace","light","dark","imports","getModulePath","setups","languageNameMap","docLangMap","resolveHighlighter","languageName","lang","prismjsPlugin","opt","preloadLanguages","lineNumbersPlugin","collapsedLinesPlugin","codeBlockTitlePlugin"],"mappings":"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"}