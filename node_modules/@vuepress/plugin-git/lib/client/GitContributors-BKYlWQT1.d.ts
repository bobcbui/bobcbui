import * as vue from 'vue';
import { FunctionalComponent } from 'vue';
import { PageFrontmatter } from 'vuepress/shared';

/**
 * Git provider
 */
type KnownGitProvider = 'bitbucket' | 'gitee' | 'github' | 'gitlab';
/**
 * Co-author information
 */
interface CoAuthorInfo {
    name: string;
    email: string;
}
interface GitContributorInfo {
    /**
     * Contributor display name
     */
    name: string;
    /**
     * Contributor email
     */
    email: string;
    /**
     * Contributor username on the git hosting service
     */
    username: string;
    /**
     * Number of commits
     */
    commits: number;
    /**
     * Contributor avatar
     */
    avatar?: string;
    /**
     * The url of the contributor
     */
    url?: string;
}
interface GitChangelogInfo {
    /**
     * Commit hash
     */
    hash: string;
    /**
     * Unix timestamp in milliseconds
     */
    time: number;
    /**
     * Commit message
     */
    message: string;
    /**
     * The url of the commit
     */
    commitUrl?: string;
    /**
     * release tag
     */
    tag?: string;
    /**
     * The url of the release tag
     */
    tagUrl?: string;
    /**
     * Commit author name
     */
    author: string;
    /**
     * Commit author email
     */
    email: string;
    /**
     * The co-authors of the commit
     */
    coAuthors?: CoAuthorInfo[];
}
interface GitPluginFrontmatter extends PageFrontmatter {
    gitInclude?: string[];
    /**
     * Whether to get the contributors of a page
     *
     * - If the value is `false`, it will be ignored
     * - If the value is `string[]`, it will be used as the list of extra contributors
     */
    contributors?: string[] | boolean;
    /**
     * Whether to get the changelog of a page
     */
    changelog?: boolean;
}
interface GitPluginPageData extends Record<string, unknown> {
    git: GitData;
}
interface GitData {
    /**
     * Unix timestamp in milliseconds of the first commit
     */
    createdTime?: number;
    /**
     * Unix timestamp in milliseconds of the last commit
     */
    updatedTime?: number;
    /**
     * Contributors of all commits
     */
    contributors?: GitContributorInfo[];
    /**
     * Changelog of a page
     */
    changelog?: GitChangelogInfo[];
}
interface GitLocaleData {
    /**
     * Contributors title
     */
    contributors: string;
    /**
     * Changelog title
     */
    changelog: string;
    /**
     * Word to represent a commit "on" a time
     */
    timeOn: string;
    /**
     * Changelog button
     */
    viewChangelog: string;
    /**
     * Latest updated
     */
    latestUpdateAt: string;
}
interface GitUrlPattern {
    issue?: string;
    tag?: string;
    commit?: string;
}
interface GitInjectOptions {
    provider?: KnownGitProvider | null;
    repo?: string;
    pattern?: GitUrlPattern;
}

declare const GitContributor: FunctionalComponent<GitContributorInfo>;
declare const GitContributors: vue.DefineComponent<vue.ExtractPropTypes<{
    /** Contributor title */
    title: StringConstructor;
    /** header level of contributor title */
    headerLevel: {
        type: NumberConstructor;
        default: number;
    };
}>, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | null, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    /** Contributor title */
    title: StringConstructor;
    /** header level of contributor title */
    headerLevel: {
        type: NumberConstructor;
        default: number;
    };
}>> & Readonly<{}>, {
    headerLevel: number;
}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

export { GitContributor as c, GitContributors as d };
export type { CoAuthorInfo as C, GitChangelogInfo as G, KnownGitProvider as K, GitContributorInfo as a, GitLocaleData as b, GitPluginFrontmatter as e, GitPluginPageData as f, GitData as g, GitUrlPattern as h, GitInjectOptions as i };
